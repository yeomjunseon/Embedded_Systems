============================================================길안내 - UART로 통신 / ‘8버튼으로 호수 선택 시 길안내 led 발광, UART 통신
===========================================================
#include<SoftwareSerial.h>
SoftwareSerial mySerial(2, 3);
int c;
const int red_1 = 4;
const int green_1 = 5;
const int red_2 = 6;
const int green_2 = 7;
const int red_3 = 8;
const int green_3 = 9;
const int red_4 = 10;
const int green_4 = 11;
const int red_5 = 12;
const int green_5 = 13;
const int red_6 = A0;
const int green_6 = A1;





void setup() {
  // put your setup code here, to run once:

  pinMode(red_1, OUTPUT);
  pinMode(green_1, OUTPUT);
  pinMode(red_2, OUTPUT);
  pinMode(green_2, OUTPUT);
  pinMode(red_3, OUTPUT);
  pinMode(green_3, OUTPUT);
  pinMode(red_4, OUTPUT);
  pinMode(green_4, OUTPUT);
  pinMode(red_5, OUTPUT);
  pinMode(green_5, OUTPUT);
  pinMode(red_6, OUTPUT);
  pinMode(green_6, OUTPUT);
  digitalWrite(red_6, HIGH);

  mySerial.begin(9600);
  Serial.begin(9600);
}

void loop() {
  // put your main code here, to run repeatedly:
  
  if(mySerial.available()) {
    c = mySerial.read(); 
    Serial.println(c);
    if(c == '1') {
      digitalWrite(red_5, HIGH);
      delay(4000);
      digitalWrite(red_5, LOW);
 
      digitalWrite(red_1, HIGH);
      delay(3000);
      digitalWrite(red_1, LOW);
    }
    if(c == '2') {
      digitalWrite(red_4, HIGH);
      delay(5000);
      digitalWrite(red_4, LOW);
    }
    if(c == '3') {
      digitalWrite(red_5, HIGH);
      delay(7000);
      digitalWrite(red_5, LOW);
      digitalWrite(red_3, HIGH);
      delay(3000);
      digitalWrite(red_3, LOW);
    }
    if(c == '4') {
      digitalWrite(red_2, HIGH);
      delay(8000);
      digitalWrite(red_2, LOW);
    }
   
  }
    
}

============================================================길안내 - UART로 통신 / lcd 모니터와 8버튼으로 길 안내 시스템 구축, led와 UART 통신
===========================================================
#include <LiquidCrystal.h>
#include <SoftwareSerial.h>
SoftwareSerial mySerial(2, 3);
LiquidCrystal lcd(4, 5, 6, 7, A0, A1);

// 주소 0x27인 경우 사용, 주소는 LCD에 따라 다를 수 있음


const int k1 = 8;
const int k2 = 9;
const int k3 = 10;
const int k5 = 11;
const int k6 = 12;
const int k7 = 13;

byte room = 0; // 401은 1, 402는 2, 403은 3, 404는 4
byte state = 0;

void setup() {
  pinMode(k1, INPUT);
  pinMode(k2, INPUT);
  pinMode(k3, INPUT);
  pinMode(k5, INPUT);
  pinMode(k6, INPUT);
  pinMode(k7, INPUT);

  lcd.begin(16, 2);
  lcd.clear();
  lcd.print("Hello, IoT");
  lcd.setCursor(0, 1);
  lcd.print("May I help you?");
  delay(1000);
  lcd.clear();
  lcd.clear();
  delay(500);
  lcd.print("Choose the room");

  Serial.begin(9600);
  mySerial.begin(9600);
}



void loop() {

  switch (state) {
    case 0: {
      if (digitalRead(k2) == HIGH) {
        lcd.clear();
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Are you sure");
        lcd.setCursor(0, 1);
        lcd.print("401?");
        state++;
        room = 1;
      } 
      else if (digitalRead(k6) == HIGH) {
        lcd.clear();
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Are you sure");
        lcd.setCursor(0, 1);
        lcd.print("402?");
        state++;
        room = 2;
      } 
      else if (digitalRead(k1) == HIGH) {
        lcd.clear();
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Are you sure");
        lcd.setCursor(0, 1);
        lcd.print("403?");
        state++;
        room = 3;
      } 
      else if (digitalRead(k5) == HIGH) {
        lcd.clear();

        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Are you sure");
        lcd.setCursor(0, 1);
        lcd.print("404?");
        state++;
        room = 4;
      }
      break;
    }

    case 1: {
      if (digitalRead(k3) == HIGH) {
        lcd.clear();
        lcd.clear();
        lcd.setCursor(0, 1); 
        lcd.print("Follow the BLUE");
        state++;
        mySerial.println(room);
        room = 0;
        delay(1000);
      }
      break;
    }

    case 2: {
      delay(1000);
      state = 0;
      lcd.clear();
      lcd.clear();
      lcd.print("Choose the room");
      delay(500);
      break;
    }
  }

    
}

==========================================================
화재 - (마스터) SPI로 통신 / 불꽃감지센서와 가스감지 센서가 감지하면 'A' 를 SPI 통신을 통해 슬레이브에게 전송
============================================================

#include <SPI.h>

const int ssPin = 10;                // 슬레이브 선택 핀
const int flameSensorPins[4] = {A0, A1, A2, A3}; // 불꽃 감지 센서 핀 배열
const int gasSensorPins[4] = {4, 5, 6, 7};    // 가스 감지 센서 핀 배열

const int flameThreshold = 1050;    // 수정된 불꽃 감지 센서 임계값
const int gasThreshold = 1000;      // 수정된 가스 감지 센서 임계값

void setup() {
  Serial.begin(9600);
  SPI.begin();
}

void loop() {
  char sensorSignal = 'N'; // 초기 값으로 정상 상태 설정
    
  for (int i = 0; i < 4; i++) {
    // 가스 센서 값 안정화를 위한 추가 코드
    int gasValueStabilized = 0;
    for (int j = 0; j < 5; j++) {
      gasValueStabilized += analogRead(gasSensorPins[i]);
      delay(50);  // 50ms 대기
    }
    int gasValue = gasValueStabilized / 5;

    Serial.print("Flame Sensor ");
    Serial.print(i + 1);
    Serial.print(" Value: ");
    Serial.println(analogRead(flameSensorPins[i]));

    Serial.print("Gas Sensor ");
    Serial.print(i + 1);
    Serial.print(" Value: ");
    Serial.println(gasValue);

    if (analogRead(flameSensorPins[i]) > flameThreshold || gasValue > gasThreshold) {
      sensorSignal = 'A';  // 가스 또는 불꽃 감지 센서 감지 시
      break;  // 한 번이라도 감지되면 나머지 센서는 확인하지 않음
    }


    if (analogRead(flameSensorPins[i]) < 500) {
      sensorSignal = 'A';  // 불꽃이 700 미만 또는 가스가 600 미만일 때도 감지로 처리
      break;
    }

    
  }

  Serial.print("Sending Signal: ");
  Serial.println(sensorSignal);

  SPI.beginTransaction(SPISettings(1000000, MSBFIRST, SPI_MODE0));
  digitalWrite(ssPin, LOW);
  SPI.transfer(sensorSignal);
  digitalWrite(ssPin, HIGH);
  SPI.endTransaction();

  delay(500);  // 딜레이를 추가하여 감지 간격을 조절할 수 있습니다.
}  


============================================================
화재 - (슬레이브) SPI로 통신 / ‘A’라는 신호를 마스터에게 받으면 감지한 방에서 부저,LED 작동
===========================================================
#include <SPI.h>

const int ledPins[4] = {2, 3, 4, 5};   // LED 핀 배열
const int buzzerPin = 7;                // 부저 핀
const int ssPin = 10;                    // 슬레이브 선택 핀

void setup() {
  Serial.begin(9600);
  for (int i = 0; i < 4; i++) {
    pinMode(ledPins[i], OUTPUT);
  }
  pinMode(buzzerPin, OUTPUT);
  SPI.begin();
  SPI.setBitOrder(MSBFIRST);
  SPI.setDataMode(SPI_MODE0);
  SPI.setClockDivider(SPI_CLOCK_DIV8);
  pinMode(ssPin, INPUT);  // 슬레이브에서는 SS 핀을 입력으로 설정
}

void loop() {
  char receivedData;

  if (digitalRead(ssPin) == LOW) {
    receivedData = SPI.transfer(' ');  // 마스터로부터 데이터 수신
    delay(5);  // 딜레이를 추가하여 감지 간격을 조절할 수 있습니다.

    if (receivedData == 'A') {
      Serial.println("Alarm Triggered!");

      for (int i = 0; i < 4; i++) {
        digitalWrite(ledPins[i], HIGH);  // 감지된 센서에 해당하는 LED를 켜기
      }
      tone(buzzerPin, 1000);  // 부저 울리기
      delay(5000);  // 5초 동안 유지
      for (int i = 0; i < 4; i++) {
        digitalWrite(ledPins[i], LOW);  // 모든 LED를 끄기
      }
      noTone(buzzerPin);  // 부저 멈추기
    }
  }
}

============================================================
화재 - 아두이노 우노(마스터) I2C로 통신 / 버튼이 눌렸을 때 I2C LCD(슬레이브)에 사람이 갇혀있음을 통신하는 코드
===========================================================

#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 20, 4);

const int pinButton1 = 2; // 디지털 핀
const int pinButton2 = 3;
const int pinButton3 = 4;
const int pinButton4 = 5;

boolean lastButton1 = LOW;
boolean lastButton2 = LOW;
boolean lastButton3 = LOW;
boolean lastButton4 = LOW;
boolean currentButton1 = LOW;
boolean currentButton2 = LOW;
boolean currentButton3 = LOW;
boolean currentButton4 = LOW;

boolean debounce(int pinButton, boolean last) {
  boolean current = digitalRead(pinButton);
  if (current != last) {
    delay(5);
    current = digitalRead(pinButton);
  }
  return current;
}

void setup() {
  pinMode(pinButton1, INPUT);
  pinMode(pinButton2, INPUT);
  pinMode(pinButton3, INPUT);
  pinMode(pinButton4, INPUT);
  
  lcd.begin();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("No problem");
}

void loop() {
  currentButton1 = debounce(pinButton1, lastButton1);
  currentButton2 = debounce(pinButton2, lastButton2);
  currentButton3 = debounce(pinButton3, lastButton3);
  currentButton4 = debounce(pinButton4, lastButton4);

  if (currentButton1 == HIGH && lastButton1 == LOW) {
    lcd.setCursor(0, 0);
    lcd.print("There is a person"); 
    lcd.setCursor(0, 1);
    lcd.print("in room 401");
    lastButton1 = currentButton1;
  }
  if (currentButton2 == HIGH && lastButton2 == LOW) {
    lcd.setCursor(0, 0);
    lcd.print("There is a person"); 
    lcd.setCursor(0, 1);
    lcd.print("in room 402");
    lastButton2 = currentButton2;
  }
  if (currentButton3 == HIGH && lastButton3 == LOW) {
    lcd.setCursor(0, 0);
    lcd.print("There is a person"); 
    lcd.setCursor(0, 1);
    lcd.print("in room 403");
    lastButton3 = currentButton3;
  }
  if (currentButton4 == HIGH && lastButton4 == LOW) {
    lcd.setCursor(0, 0);
    lcd.print("There is a person"); 
    lcd.setCursor(0, 1);
    lcd.print("in room 404");
    lastButton4 = currentButton4;
  }
}
